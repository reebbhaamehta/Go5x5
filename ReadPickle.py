import argparse
import pickle
import random


def read_qvals(file_old, file_new):
    file = "qvalues_Anton_500000.pkl"
    with open(file_old, 'rb') as pickle_file:
        qvals_dict = pickle.load(pickle_file)

    # q_vals_dict = {'0000000000000000000000000': {(0, 0): 0.24512701406736026, (0, 1): 0.6164310495155861, (0, 2): 0.8434183801062303, (0, 3): 0.07991494409038213, (0, 4): 0.8552728805297407, (1, 0): 0.8791322359843894, (1, 1): 0.6754630220016046, (1, 2): 0.02220319627285594, (1, 3): 0.16162015377093697, (1, 4): 0.9904457712146257, (2, 0): 0.6242043402591577, (2, 1): 0.5258208003944926, (2, 2): 0.6201704335267295, (2, 3): 0.5287960794320204, (2, 4): 0.637286703268425, (3, 0): 0.2753355947345342, (3, 1): 0.7056974180786836, (3, 2): 0.8128891767256264, (3, 3): 0.6717676379080287, (3, 4): 0.6393179932225652, (4, 0): 0.7914972805757098, (4, 1): 0.3870328230383784, (4, 2): 0.9890999910407767, (4, 3): 0.6841166016767485, (4, 4): 0.9759277480793876, 'PASS': 0.019895706486532605}, '0210000000000000000000000': {(0, 0): 0.3861506652788206, (0, 1): 0.1517721216748853, (0, 2): 0.9586525564364635, (0, 3): 0.09490780914299946, (0, 4): 0.8921844164614231, (1, 0): 0.5011927281143127, (1, 1): 0.6834077146619973, (1, 2): 0.00882441187343086, (1, 3): 0.7181473460361539, (1, 4): 0.37238239790362393, (2, 0): 0.8910598453966154, (2, 1): 0.9131772572830629, (2, 2): 0.3213635341149428, (2, 3): 0.23808323036524193, (2, 4): 0.9011437570517769, (3, 0): 0.21361495186344104, (3, 1): 0.360275617339181, (3, 2): 0.1473278428459548, (3, 3): 0.6056479842875051, (3, 4): 0.817660590825306, (4, 0): 0.34973837316808176, (4, 1): 0.72663194749926, (4, 2): 0.10218298788295699, (4, 3): 0.7687306811511284, (4, 4): 0.11876824844946343, 'PASS': 0.4779844952681961}, '0210000000010000002000000': {(0, 0): 0.009669239977004196, (0, 1): 0.5654345312188301, (0, 2): 0.7835152024649492, (0, 3): 0.8639203646919755, (0, 4): 0.588836822451788, (1, 0): 0.5213298537140234, (1, 1): 0.9361088808392544, (1, 2): 0.9925892998429879, (1, 3): 0.46037408881055897, (1, 4): 0.30257739361876934, (2, 0): 0.008756767167796053, (2, 1): 0.23392569869022906, (2, 2): 0.41425101601006087, (2, 3): 0.7128192129918433, (2, 4): 0.36877231185041115, (3, 0): 0.914030238588519, (3, 1): 0.9636088216537542, (3, 2): 0.05547356072534382, (3, 3): 0.29852581614712403, (3, 4): 0.36739007105108623, (4, 0): 0.45327780621513747, (4, 1): 0.8378696697742879, (4, 2): 0.7193076759512851, (4, 3): 0.7422461978353062, (4, 4): 0.8412076543217144, 'PASS': 0.4071358623682506}, '0210000020010001002000000': {(0, 0): 0.02043342093211764, (0, 1): 0.8818365242407682, (0, 2): 0.13022938460308497, (0, 3): 0.5469664979227051, (0, 4): 0.7287662173512406, (1, 0): 0.5670224105078738, (1, 1): 0.18357897795194766, (1, 2): 0.9938102796707643, (1, 3): 0.6498255762864644, (1, 4): 0.22084959399092674, (2, 0): 0.6989352344578067, (2, 1): 0.8263573046268621, (2, 2): 0.6072306621884589, (2, 3): 0.116585726207731, (2, 4): 0.9179841089128796, (3, 0): 0.6859125598371641, (3, 1): 0.40614698191690357, (3, 2): 0.8336346427467421, (3, 3): 0.16922738385487102, (3, 4): 0.2991036794511409, (4, 0): 0.1276131091687165, (4, 1): 0.22416333795072219, (4, 2): 0.6386700268858605, (4, 3): 0.06350450708576305, (4, 4): 0.6114330890058488, 'PASS': 0.5863246156871647}, '0210002020010001012000000': {(0, 0): 0.731665667122758, (0, 1): 0.9771277895052549, (0, 2): 0.47295825485460574, (0, 3): 0.6226418299309233, (0, 4): 0.27832728249090266, (1, 0): 0.9241297910548666, (1, 1): 0.3374220009783332, (1, 2): 0.022257218120824596, (1, 3): 0.8301289180348509, (1, 4): 0.7848606226157242, (2, 0): 0.7632106256406788, (2, 1): 0.11080595842454721, (2, 2): 0.7786335963522939, (2, 3): 0.36016224423476817, (2, 4): 0.1473869593311844, (3, 0): 0.2075899753296261, (3, 1): 0.11371542760313014, (3, 2): 0.04599278001669094, (3, 3): 0.5028824332543239, (3, 4): 0.4722414156516427, (4, 0): 0.3079778927478849, (4, 1): 0.2865308375890808, (4, 2): 0.2968890992968921, (4, 3): 0.8645895958633817, (4, 4): 0.16733760724049762, 'PASS': 0.9544040899645518}, '0210002020011001012200000': {(0, 0): 0.7455631058270011, (0, 1): 0.47666332248308907, (0, 2): 0.8570414513151321, (0, 3): 0.8302440409854088, (0, 4): 0.4529931238396572, (1, 0): 0.2422636976799526, (1, 1): 0.4778360703990201, (1, 2): 0.7133812425193259, (1, 3): 0.4718024372925842, (1, 4): 0.09180949217332346, (2, 0): 0.4835168409560495, (2, 1): 0.7952039766630792, (2, 2): 0.6875294135741797, (2, 3): 0.5861557727754826, (2, 4): 0.00921303362433068, (3, 0): 0.6670815433606837, (3, 1): 0.22848969216936477, (3, 2): 0.013409984251878448, (3, 3): 0.25238934324557905, (3, 4): 0.8998212736905402, (4, 0): 0.9690483839254007, (4, 1): 0.37927600655542637, (4, 2): 0.17075603133646466, (4, 3): 0.44070655602262854, (4, 4): 0.681841825617352, 'PASS': 0.7756975774294385}, '1210202020011001012200000': {(0, 0): 0.7405531536905314, (0, 1): 0.6762998696391337, (0, 2): 0.42433640827229646, (0, 3): 0.15506132260577876, (0, 4): 0.8961910913278994, (1, 0): 0.2065170261285343, (1, 1): 0.6016634707500517, (1, 2): 0.7166815052200293, (1, 3): 0.8258971314627583, (1, 4): 0.18782736858866644, (2, 0): 0.23937966724439275, (2, 1): 0.361395676225694, (2, 2): 0.5942514421704161, (2, 3): 0.6051971525682361, (2, 4): 0.9517150383345188, (3, 0): 0.013213628665302402, (3, 1): 0.5486598417636895, (3, 2): 0.9659031335360018, (3, 3): 0.13598268259943258, (3, 4): 0.0702561525653086, (4, 0): 0.8745135847892684, (4, 1): 0.26963258811440394, (4, 2): 0.77209586249837, (4, 3): 0.9050407249256247, (4, 4): 0.6120163408558957, 'PASS': 0.5802251715331076}, '0210222020011001012210000': {(0, 0): 0.2818924716791579, (0, 1): 0.18984976688364374, (0, 2): 0.7386182422178424, (0, 3): 0.8562417338852037, (0, 4): 0.006350854682614426, (1, 0): 0.8615643275667136, (1, 1): 0.587430492644197, (1, 2): 0.24152578444788186, (1, 3): 0.029655483446772934, (1, 4): 0.5648601616277577, (2, 0): 0.8150610775387872, (2, 1): 0.810206584978536, (2, 2): 0.43172873628082786, (2, 3): 0.5540976161155052, (2, 4): 0.781815578081732, (3, 0): 0.22104729841086956, (3, 1): 0.59266248180349, (3, 2): 0.4514933987520786, (3, 3): 0.6138262553821769, (3, 4): 0.13822826046280823, (4, 0): 0.8649244285609634, (4, 1): 0.9775447991990737, (4, 2): 0.541106900902275, (4, 3): 0.03574040565755243, (4, 4): 0.16457533117468826, 'PASS': 0.6113414563817494}, '0212222020111001012210000': {(0, 0): 0.680158387132644, (0, 1): 0.19753346483741163, (0, 2): 0.6862725437726899, (0, 3): 0.1578654900337817, (0, 4): 0.1382547315998527, (1, 0): 0.20076286219068307, (1, 1): 0.41487553727961946, (1, 2): 0.9832002517063668, (1, 3): 0.1699065775787868, (1, 4): 0.6094449022451309, (2, 0): 0.24178627261935992, (2, 1): 0.5341488601199985, (2, 2): 0.07326321330761754, (2, 3): 0.5428434072842871, (2, 4): 0.5638758294820319, (3, 0): 0.9148939908838527, (3, 1): 0.48749512754905355, (3, 2): 0.5092522754282867, (3, 3): 0.6446064121413698, (3, 4): 0.5891784040826842, (4, 0): 0.6914370491030616, (4, 1): 0.9800329671438291, (4, 2): 0.2499877185143694, (4, 3): 0.9090977542507722, (4, 4): 0.6857354820794386, 'PASS': 0.7604166749844204}, '0212222021111001012212000': {(0, 0): 0.7053937854629706, (0, 1): 0.5831226778988323, (0, 2): 0.2882950521877705, (0, 3): 0.3482572134344649, (0, 4): 0.17585840032464406, (1, 0): 0.056104886995710035, (1, 1): 0.19413826774620513, (1, 2): 0.23350354553658714, (1, 3): 0.7567703435667181, (1, 4): 0.8329012038296818, (2, 0): 0.017922733418830106, (2, 1): 0.7170783484830033, (2, 2): 0.28929113041286325, (2, 3): 0.7794806404873993, (2, 4): 0.2421837914726218, (3, 0): 0.7495776595426215, (3, 1): 0.8852513923015634, (3, 2): 0.19209195284780278, (3, 3): 0.24227486812884347, (3, 4): 0.36589460156668685, (4, 0): 0.04103233296341979, (4, 1): 0.5386421247131751, (4, 2): 0.7825316880693375, (4, 3): 0.6047088942784035, (4, 4): 0.9521791829281901, 'PASS': 0.7592779701714176}, '0212222021111001112212020': {(0, 0): 0.8014465172281322, (0, 1): 0.8778658227827767, (0, 2): 0.12138850495421838, (0, 3): 0.12183619521063427, (0, 4): 0.12724132087262863, (1, 0): 0.6835523301121547, (1, 1): 0.01824912190354544, (1, 2): 0.6980815043776593, (1, 3): 0.5902659234670481, (1, 4): 0.5255840560769908, (2, 0): 0.12810350685168093, (2, 1): 0.2072998800360244, (2, 2): 0.685445942752757, (2, 3): 0.9511301408434132, (2, 4): 0.2752327980684338, (3, 0): 0.6051746446804862, (3, 1): 0.39994698763201053, (3, 2): 0.7808801467350237, (3, 3): 0.014974248663177425, (3, 4): 0.3615439581560771, (4, 0): 0.3236381834178803, (4, 1): 0.9382831271768991, (4, 2): 0.10980781964911113, (4, 3): 0.809632662255972, (4, 4): 0.46794664280095133, 'PASS': 0.21992149185935006}, '0212222121111201112212020': {(0, 0): -1.0, (0, 1): 0.9245366575955056, (0, 2): 0.22358024325217496, (0, 3): 0.49355529513378626, (0, 4): 0.1861473087069232, (1, 0): 0.4034022049698598, (1, 1): 0.9542379349487461, (1, 2): 0.18891580986208478, (1, 3): 0.07432698388816694, (1, 4): 0.25236516874048087, (2, 0): 0.7593186415043004, (2, 1): 0.6745487783586189, (2, 2): 0.8366317082854342, (2, 3): 0.13203131595089612, (2, 4): 0.8966185906007708, (3, 0): 0.7451399512039816, (3, 1): 0.8342632798922544, (3, 2): 0.8344436718637693, (3, 3): 0.5905888860646749, (3, 4): 0.11592247949937506, (4, 0): 0.09155260916846109, (4, 1): 0.2631121151473128, (4, 2): 0.7870445235127375, (4, 3): 0.2818615187689131, (4, 4): 0.26104465629332285, 'PASS': 0.13084528851322996}}
    state = []
    action = []
    q_value = []
    for i in range(10):
        state.append(random.choice(list(qvals_dict)))
        actions = qvals_dict[state[i]]
        action.append(random.choice(list(actions)))
        q_value.append(actions[action[i]])

    file = "qvalues_Anton_1300000.pkl"
    with open(file_new, 'rb') as pickle_file:
        qvals_dict = pickle.load(pickle_file)

    q_value_newer = []
    for i in range(10):
        q_value_newer.append(qvals_dict[state[i]][action[i]])

    # print(q_value_newer)
    # print(q_value)
    for old, new in zip(q_value, q_value_newer):
        print('-' * 60)
        print("  q_value_old = {}".format(old))
        print("q_value_newer = {}".format(new))
        print('-' * 60)

    # state = random.choice(list(qvals_dict))
    # state.append(random.choice(list(qvals_dict)))
    # actions = qvals_dict[state]
    # action = random.choice(list(actions))
    # q_value = actions[action]


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--file_old", type=str, help="Initial qvalue file", default="")
    parser.add_argument("--file_new", type=str, help="Final qvalue file", default="")
    args = parser.parse_args()
    read_qvals(args.file_old, args.file_new)
